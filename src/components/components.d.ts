/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppBanner {
        /**
          * The level to use for the headline. Defaults to "h2"
         */
        "headlineTag": "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
        /**
          * The default (black) text for the headline
         */
        "headlineText"?: string;
        /**
          * The alignment of the image
         */
        "imageAlignment"?: "left" | "right";
        /**
          * `true` if the button should be disabled
         */
        "linkDisabled"?: boolean;
        /**
          * The url where the button-link should direct to
         */
        "linkHref"?: string;
        /**
          * The name of the icon on the left side of the text.
         */
        "linkIconLeft"?: string;
        /**
          * The name of the icon on the right side of the text.
         */
        "linkIconRight"?: string;
        /**
          * The target of the button-link. If this is '_blank', rel="noopener noreferrer" is added automatically.
         */
        "linkTarget"?: "_top" | "_parent" | "_blank" | "_self";
        /**
          * The text displayed inside the button
         */
        "linkText": string;
    }
    interface AppButtonSecondary {
        /**
          * `true` if the button should be disabled
         */
        "disabled"?: boolean;
        /**
          * The url where the button-link should direct to
         */
        "href"?: string;
        /**
          * true, when the button should be rendered without an <a> or <button> tag
         */
        "imitateButton"?: boolean;
        /**
          * The target of the button-link. If this is '_blank', rel="noopener noreferrer" is added automatically.
         */
        "target"?: "_top" | "_parent" | "_blank" | "_self";
        /**
          * The text displayed inside the button
         */
        "text": string;
        /**
          * The type of the button
         */
        "type": "button" | "submit" | "reset";
    }
    interface AppImage {
        /**
          * The alt text of the image
         */
        "alt": string;
        /**
          * Whether the image should be and img (default) or a background-image
         */
        "background": boolean;
        /**
          * The default height of the image
         */
        "height": number;
        /**
          * source of the image (default)
         */
        "imgSrc": string;
        /**
          * loading `auto` or `eager` (default: `lazy`)
         */
        "loading"?: "auto" | "eager" | "lazy";
        /**
          * The default width of the image
         */
        "width": number;
    }
    interface AppSection {
    }
}
declare global {
    interface HTMLAppBannerElement extends Components.AppBanner, HTMLStencilElement {
    }
    var HTMLAppBannerElement: {
        prototype: HTMLAppBannerElement;
        new (): HTMLAppBannerElement;
    };
    interface HTMLAppButtonSecondaryElement extends Components.AppButtonSecondary, HTMLStencilElement {
    }
    var HTMLAppButtonSecondaryElement: {
        prototype: HTMLAppButtonSecondaryElement;
        new (): HTMLAppButtonSecondaryElement;
    };
    interface HTMLAppImageElement extends Components.AppImage, HTMLStencilElement {
    }
    var HTMLAppImageElement: {
        prototype: HTMLAppImageElement;
        new (): HTMLAppImageElement;
    };
    interface HTMLAppSectionElement extends Components.AppSection, HTMLStencilElement {
    }
    var HTMLAppSectionElement: {
        prototype: HTMLAppSectionElement;
        new (): HTMLAppSectionElement;
    };
    interface HTMLElementTagNameMap {
        "app-banner": HTMLAppBannerElement;
        "app-button-secondary": HTMLAppButtonSecondaryElement;
        "app-image": HTMLAppImageElement;
        "app-section": HTMLAppSectionElement;
    }
}
declare namespace LocalJSX {
    interface AppBanner {
        /**
          * The level to use for the headline. Defaults to "h2"
         */
        "headlineTag"?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
        /**
          * The default (black) text for the headline
         */
        "headlineText"?: string;
        /**
          * The alignment of the image
         */
        "imageAlignment"?: "left" | "right";
        /**
          * `true` if the button should be disabled
         */
        "linkDisabled"?: boolean;
        /**
          * The url where the button-link should direct to
         */
        "linkHref"?: string;
        /**
          * The name of the icon on the left side of the text.
         */
        "linkIconLeft"?: string;
        /**
          * The name of the icon on the right side of the text.
         */
        "linkIconRight"?: string;
        /**
          * The target of the button-link. If this is '_blank', rel="noopener noreferrer" is added automatically.
         */
        "linkTarget"?: "_top" | "_parent" | "_blank" | "_self";
        /**
          * The text displayed inside the button
         */
        "linkText"?: string;
    }
    interface AppButtonSecondary {
        /**
          * `true` if the button should be disabled
         */
        "disabled"?: boolean;
        /**
          * The url where the button-link should direct to
         */
        "href"?: string;
        /**
          * true, when the button should be rendered without an <a> or <button> tag
         */
        "imitateButton"?: boolean;
        /**
          * The target of the button-link. If this is '_blank', rel="noopener noreferrer" is added automatically.
         */
        "target"?: "_top" | "_parent" | "_blank" | "_self";
        /**
          * The text displayed inside the button
         */
        "text"?: string;
        /**
          * The type of the button
         */
        "type"?: "button" | "submit" | "reset";
    }
    interface AppImage {
        /**
          * The alt text of the image
         */
        "alt"?: string;
        /**
          * Whether the image should be and img (default) or a background-image
         */
        "background"?: boolean;
        /**
          * The default height of the image
         */
        "height"?: number;
        /**
          * source of the image (default)
         */
        "imgSrc"?: string;
        /**
          * loading `auto` or `eager` (default: `lazy`)
         */
        "loading"?: "auto" | "eager" | "lazy";
        /**
          * The default width of the image
         */
        "width"?: number;
    }
    interface AppSection {
    }
    interface IntrinsicElements {
        "app-banner": AppBanner;
        "app-button-secondary": AppButtonSecondary;
        "app-image": AppImage;
        "app-section": AppSection;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-banner": LocalJSX.AppBanner & JSXBase.HTMLAttributes<HTMLAppBannerElement>;
            "app-button-secondary": LocalJSX.AppButtonSecondary & JSXBase.HTMLAttributes<HTMLAppButtonSecondaryElement>;
            "app-image": LocalJSX.AppImage & JSXBase.HTMLAttributes<HTMLAppImageElement>;
            "app-section": LocalJSX.AppSection & JSXBase.HTMLAttributes<HTMLAppSectionElement>;
        }
    }
}
